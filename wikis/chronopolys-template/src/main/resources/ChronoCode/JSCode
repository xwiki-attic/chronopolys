<?xml version="1.0" encoding="ISO-8859-1"?>

<xwikidoc>
<web>ChronoCode</web>
<name>JSCode</name>
<language></language>
<defaultLanguage>en</defaultLanguage>
<translation>0</translation>
<parent></parent>
<creator>XWiki.jvdrean</creator>
<author>XWiki.Admin</author>
<customClass></customClass>
<contentAuthor>XWiki.Admin</contentAuthor>
<creationDate>1170775914000</creationDate>
<date>1190131796000</date>
<contentUpdateDate>1190131796000</contentUpdateDate>
<version>1.352</version>
<title></title>
<template></template>
<defaultTemplate></defaultTemplate>
<validationScript></validationScript>
<comment></comment>
<minorEdit>false</minorEdit>
<object>
<class>
<name>XWiki.TagClass</name>
<customClass></customClass>
<customMapping></customMapping>
<defaultViewSheet></defaultViewSheet>
<defaultEditSheet></defaultEditSheet>
<defaultWeb></defaultWeb>
<nameField></nameField>
<validationScript></validationScript>
<tags>
<cache>0</cache>
<displayType>input</displayType>
<multiSelect>1</multiSelect>
<name>tags</name>
<number>1</number>
<prettyName>Tags</prettyName>
<relationalStorage>1</relationalStorage>
<separator> </separator>
<separators> ,|</separators>
<size>30</size>
<unmodifiable>0</unmodifiable>
<values></values>
<classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
</tags>
</class>
<name>ChronoCode.JSCode</name>
<number>0</number>
<className>XWiki.TagClass</className>
<property>
<tags/>
</property>
</object>
<object>
<class>
<name>XWiki.XWikiRights</name>
<customClass></customClass>
<customMapping></customMapping>
<defaultViewSheet></defaultViewSheet>
<defaultEditSheet></defaultEditSheet>
<defaultWeb></defaultWeb>
<nameField></nameField>
<validationScript></validationScript>
<allow>
<defaultValue>1</defaultValue>
<displayFormType>select</displayFormType>
<displayType>allow</displayType>
<name>allow</name>
<number>4</number>
<prettyName>Allow/Deny</prettyName>
<unmodifiable>0</unmodifiable>
<classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
</allow>
<groups>
<cache>0</cache>
<displayType>select</displayType>
<multiSelect>1</multiSelect>
<name>groups</name>
<number>4</number>
<prettyName>Groups</prettyName>
<relationalStorage>0</relationalStorage>
<separator> </separator>
<size>5</size>
<unmodifiable>0</unmodifiable>
<usesList>1</usesList>
<classType>com.xpn.xwiki.objects.classes.GroupsClass</classType>
</groups>
<levels>
<cache>0</cache>
<displayType>select</displayType>
<multiSelect>1</multiSelect>
<name>levels</name>
<number>4</number>
<prettyName>Levels</prettyName>
<relationalStorage>0</relationalStorage>
<separator> </separator>
<size>3</size>
<unmodifiable>0</unmodifiable>
<classType>com.xpn.xwiki.objects.classes.LevelsClass</classType>
</levels>
<users>
<cache>0</cache>
<displayType>select</displayType>
<multiSelect>1</multiSelect>
<name>users</name>
<number>4</number>
<prettyName>Users</prettyName>
<relationalStorage>0</relationalStorage>
<separator> </separator>
<size>5</size>
<unmodifiable>0</unmodifiable>
<usesList>1</usesList>
<classType>com.xpn.xwiki.objects.classes.UsersClass</classType>
</users>
</class>
<name>ChronoCode.JSCode</name>
<number>0</number>
<className>XWiki.XWikiRights</className>
<property>
<allow>1</allow>
</property>
<property>
<groups>XWiki.XWikiAllGroup,</groups>
</property>
<property>
<levels>view,</levels>
</property>
<property>
<users>XWiki.XWikiGuest,</users>
</property>
</object>
<content>{pre}
&lt;script type="text/javascript"&gt;

var currentPage;
var currentSpace;
var currentFullName;
var localUser;
var userName;
var userPage;
var userSpace;
var daySymbol;
var passwdnotmatch;
var passwdtooshort;
var passwdupdated;
var confirmdelphase;
var confirmcontainerdelete;

// ---------------- //
// Dashboard modes  //
// ---------------- //

function switchDashboardMode(mode) {  
  // hide all mode infos
  var els = document.getElementsByClassName('mode', $('chronoapp'));  
  for (var i = 0; i &lt; els.length; i++) {
    if (eltHasClass(els[i], mode)) { 
      // desired mode
      if (eltHasClass(els[i], 'hidden')) {
        rmClass(els[i], "hidden");
      }
    } else {
      // other modes
      if (!eltHasClass(els[i], 'hidden')) {
        addClass(els[i], "hidden");
      }
    }
  }
}

// ---------------- //
// Phases calendars //
// ---------------- //

var phasesList = new Array();
var regDatesList = new Array();
var secsPerDay = 86400000;

function calInitDates() {
  regDatesList.clear();
  var regDatesElts = document.getElementsByClassName('registereddate');
  /* build the phases dates list */
  for (var i = 0; i &lt; regDatesElts.length; i++) {
    var pushit = true
    var phaseNb = regDatesElts[i].id.split("_")[1];
    var phaseTypeId = 'ChronoClasses.ProjectPhaseClass_' + phaseNb + '_type';
    if ($(phaseTypeId).value == '1') {
      /* the current date is from a milestone */
      if (regDatesElts[i].id.match(/start/)) {
        /* set the end date in case of 'milestone' */
        $(regDatesElts[i + 1].id).value = $(regDatesElts[i].id).value;   
      } else {
        /* don't push the milestone end in the list */
        pushit = false;
      }
    }
    if (pushit) {
      /* push current date into the list */
      var data = new Array();
      data.push(regDatesElts[i].id);
      var sdate = regDatesElts[i].value.split("/");
      data.push(new Date(sdate[2], parseInt(sdate[1], 10) - 1, sdate[0]));
      regDatesList.push(data);
    }
  }
  /* display (or not) the "add phase here" button */
  for (var i = 0; i &lt; regDatesList.length - 1; i++) {
    var evalit = true;
    var phaseNb = regDatesList[i][0].split("_")[1];
    /* display the addphase button if available */
    var phaseTypeId = 'ChronoClasses.ProjectPhaseClass_' + phaseNb + '_type';
    if ($(phaseTypeId).value == '1') {
      if (!regDatesList[i][0].match(/start/))
        evalit = false;
    } else {
      if (!regDatesList[i][0].match(/end/))
        evalit = false;
    }
    if (evalit) {    
      var phaseAddElId = 'phaseedition_' + phaseNb + '_addel';
      var phaseAddTdId = 'phaseedition_' + phaseNb + '_addtd';
      if (((regDatesList[i + 1][1] - regDatesList[i][1]) / secsPerDay) &gt; 1) {
        /* if the difference between Nend and N+1start &gt; 1 day, display addphase button */  
        rmClass($(phaseAddElId), 'hidden');
        new Effect.Highlight($(phaseAddTdId),
          { startcolor:'#F8EA95',
            endcolor:'#EFEFEF',
            duration: 1
          });
      } else {
        /* else hide addphase button */
        addClass($(phaseAddElId), 'hidden');
      }
    }
  }
}

// --------- //
// Timelines //
// --------- //

/* array of timelines */
var tllist = new Array();
/* array of timelines' loading functions */
var tlloadlist = new Array();

/* add a timeline loading function to the global list */
function registerTimelineLoad(tlload) {
  tlloadlist.push(tlload);
}

/* add a timeline object to the global list */
function registerTimeline(tl) {
  tllist.push(tl);
}

/* draw arrows around the timelines if some events are not shown in the current range */
function drawTimelineArrows(tl) {
  var tid = tl._containerDiv.id;
  var tlb = tl.getBand(0);
  if (tlb.getEventSource().getCount() &gt; 0) {
    var lbc = $(tid + '_left_img');
    var rbc = $(tid + '_right_img');
    if (tlb.getEventSource().getEarliestDate() &lt; tlb.getMinVisibleDate()) {
      lbc.style.backgroundColor = lbc.alt;
    }
    if (tlb.getEventSource().getLatestDate() &gt; tlb.getMaxVisibleDate()) {
      rbc.style.backgroundColor = rbc.alt;
    }
  }  
}

/* save the timeline range in the user profile */
function saveTimelineRange() {
  var range = $('timeline_range').value;
  var surl = getXWikiURL("XWiki", userName, "save", "");
  var parameters = 'XWiki.XWikiUsers_0_prefered_timeline_view=' + range;
  parameters = parameters + '&amp;comment=savetimelinerange';
  var myAjax = new Ajax.Request (
  surl, 
  {
    method: 'post',
    postBody: parameters
  });
}

/* reload the chronocontainers div */
function reloadDashboard(options) {
  /* avoid all previous timeline datas */
  tllist.clear();
  tlloadlist.clear();
  masterloader = null;
  
  /* update the dashboard */
  var id = 'chronocontainers';
  var surl = getXWikiURL("ChronoServices", "ContainersDisplay", "view", "xpage=plain" + options);
  var myAjax = new Ajax.Updater(
    id, 
    surl, 
    {
      method: 'get',
      evalScripts: true,
      onComplete: function() {
        /* reload dynamic timelines */
        reloadTimelines();
      }
    });
}

/* timeline's range change */
function changeTimelineRange(range) {
  reloadDashboard("&amp;prefered_timeline_view=" + range);
}

/* call the timelines loading functions */
function reloadTimelines() {

  /* the prototype onComplete handler doesn't wait for scripts eval */
  if (masterloader == null) {
    setTimeout("reloadTimelines()", 100);
  }
  
  /* now that masterloader has been evaluated we can execute it */
  masterloader();
  
  /* reload the project timelines */
  for (i = 0; i &lt; tlloadlist.length; i++) {
    tlloadlist[i]();
  }
  
  /* finally save choice in the user profile */
  saveTimelineRange();
}

/* synchronize all the center dates' timelines */
function syncTimeline(date) {

  /* set date on master timeline */
  master_tl.getBand(0).setCenterVisibleDate(date);
  master_tl.getBand(1).setCenterVisibleDate(date);
 
  /* draw band1 on band0 */
  var startd1 = master_tl.getBand(1).getMinVisibleDate();
  var endd1 = master_tl.getBand(1).getMaxVisibleDate();
  master_tl.getBand(0).getEtherPainter().setHighlight(startd1, endd1);  

  /* set date on project timelines */
  for (i = 0; i &lt; tllist.length; i++) {
    var tlb = tllist[i].getBand(0);
    var tid = tllist[i]._containerDiv.id;
    tlb.setCenterVisibleDate(date);
    if (tlb.getEventSource().getCount() &gt; 0) {
      var lbc = $(tid + '_left_img');
      var rbc = $(tid + '_right_img');
      lbc.style.backgroundColor = 'transparent';
      rbc.style.backgroundColor = 'transparent';
      if (tlb.getEventSource().getEarliestDate() &lt; tlb.getMinVisibleDate()) {
        lbc.style.backgroundColor = lbc.alt;
      }
      if (tlb.getEventSource().getLatestDate() &gt; tlb.getMaxVisibleDate()) {
        rbc.style.backgroundColor = rbc.alt;
      }
    }  
  }
}

// ------------------ //
// XWiki URL Builders //
// ------------------ //

function getXWikiURL(space, page) {
  return getXWikIURL(wikiPage, "", "");
}

function getXWikiURL(space, page, mode) {
  return getXWikIURL(space, page, mode, "");
}

function getXWikiURL(space, page, mode, args) {
  var surl = "/xwiki/bin/" + mode + "/" + space + "/" + page;
  if (args != "")
    surl = surl + "?" + args;
  return surl;
}

// ----- //
// Utils //
// ----- //

/* get the absolute posion (from top-left corner) of a HTML element, in pixels */
function getAbsolutePos(element) {
  var SL = 0, ST = 0;
  var is_div = /^div$/i.test(element.tagName);
  if (is_div &amp;&amp; element.scrollLeft) {
    SL = element.scrollLeft;
  }
  if (is_div &amp;&amp; element.scrollTop) {
    ST = element.scrollTop;
  }
  var r = { x: element.offsetLeft - SL, y: element.offsetTop - ST };
  if (element.offsetParent) {
    var tmp = this.getAbsolutePos(element.offsetParent);
    r.x += tmp.x;
    r.y += tmp.y;
  }
  return r;
}

/* difference between the passed date (dd/mm/yyyy) and today */
function todayDiff(tdate, color) {
  var today = new Date();
  var ttab = tdate.split("/");
  var year = parseInt(ttab[2], 10);
  var month = parseInt(ttab[1], 10) - 1;
  var day = parseInt(ttab[0], 10);
  var taskday = new Date(year, month, day);
  var one_day = 1000*60*60*24;
  var res = Math.ceil((taskday.getTime()-today.getTime())/(one_day));
  /*if (res &lt; 0) {
    document.write('&lt;span class="error" style="background-color:white;"&gt;');
  }
  document.write(res+daySymbol);
  if (res &lt; 0) {
    document.write('&lt;/span&gt;');
    //document.write('&lt;span class="error"&gt;'); (span mal ferme - flix)
  }*/

  if (res &lt; 0) {
    document.write('&lt;div class="error"&gt;&lt;div class="errorcontent" style="background-color:'+color+'"&gt;');
  } else {
    document.write('&lt;div class="errorcontent" style="background-color:'+color+'"&gt;');
  }
  document.write(res+daySymbol);
  if (res &lt; 0) {
    document.write('&lt;/div&gt;&lt;/div&gt;');
    /*document.write('&lt;span class="error"&gt;'); (span mal ferme - flix)*/
  } else {
    document.write('&lt;/div&gt;');
  }
}

function removeItemFromArray(array, item) {
  var i = 0;
  while (i &lt; array.length) {
    if (array[i] == item) {
      array.splice(i, 1);
    } else {
      i++;
    }
  }
}

// ------------ //
// User profile //
// ------------ //

/* send a post request to authenticate the user (ex: on passwd change) */
function authuser(user, passwd) {
  var surl = getXWikiURL("XWiki", "XWikiLogin", "loginsubmit", "");
  var parameters = 'j_username=' + user + '&amp;j_password' + passwd;
  var myAjax = new Ajax.Request (
  surl, 
  {
    method: 'post',
    postBody: parameters,
    onComplete: function() {
    }
  });
}

/* various checks + save of the new password */
function passwdchange() {
  // var oldpasswd = $('oldpasswd').value;
  $('passwderror').innerHTML = '';
  $('passwdsuccess').innerHTML = '';
  var newpasswd1 = $('newpasswd1').value;
  var newpasswd2 = $('newpasswd2').value;
  if (newpasswd1 != newpasswd2) {
    $('passwderror').innerHTML = passwdnotmatch;
    return;
  }
  if (newpasswd1.length &lt; 4) {
    $('passwderror').innerHTML = passwdtooshort;
    return;
  }
  var surl = getXWikiURL(currentSpace, currentPage, "save", "");
  var parameters = 'XWiki.XWikiUsers_0_password=' + newpasswd1;
  parameters = parameters + '&amp;comment=changepassword'
  var myAjax = new Ajax.Request (
  surl, 
  {
    method: 'post',
    postBody: parameters,
    onComplete: function() {
      Field.clear('newpasswd1', 'newpasswd2');
      $('passwdsuccess').innerHTML = passwdupdated;
      authuser(userPage, newpasswd1);
    }
  });  
}

// ---- //
// PLOG //
// ---- //

/* called on PLOG article type's change (message,event,task) */
function changeProjectArticleType() {
  addClass($('task_edit'), 'hidden');
  addClass($('task_completion_edit'), 'hidden');
  addClass($('meeting_dates_edit'), 'hidden');
  addClass($('meeting_location_edit'), 'hidden');
  addClass($('meeting_rsvp_edit'), 'hidden');
  var type = $('ChronoClasses.ProjectArticleClass_0_type').value;
  if (type == "task") {
    rmClass($('task_edit'), 'hidden');
    rmClass($('task_completion_edit'), 'hidden');
  }
  if (type == "meeting") {
    rmClass($('meeting_dates_edit'), 'hidden');
    rmClass($('meeting_location_edit'), 'hidden');
    rmClass($('meeting_rsvp_edit'), 'hidden');
  }
}

/* add a new guest to an event */
function addrsvp() {
  var user = $('rsvpmember').value;
  var id = 'rsvp';
  var surl = getXWikiURL("ChronoServices", "ProjectArticleRsvpDisplay", "view", "xpage=plain&amp;page=" + currentFullName + "&amp;action=guestadd&amp;member=" + user);
  var myAjax = new Ajax.Updater(
    id, 
    surl, 
    {
      method: 'get'
    });
}

/* delete an event's guest */
function delrsvp(rsvpnb) {
  var id = 'rsvp';
  var surl = getXWikiURL("ChronoServices", "ProjectArticleRsvpDisplay", "view", "xpage=plain&amp;page=" + currentFullName + "&amp;action=guestdel&amp;rsvpnb=" + rsvpnb);
  var myAjax = new Ajax.Updater(
    id, 
    surl, 
    {
      method: 'get'
    });
}

/* load the guest entries */
function loadRsvp() {
  var id = 'rsvp';
  var surl = getXWikiURL("ChronoServices", "ProjectArticleRsvpDisplay", "view", "xpage=plain&amp;page=" + currentFullName);
  var myAjax = new Ajax.Updater(
    id, 
    surl, 
    {
      method: 'get'
    });
}

// ----------------- //
// Project dashboard //
// ----------------- //

function panel_mouseover(id) {
  rmClass($(id+'_actions'), 'hidden');
}

function panel_mouseout(id) {
  addClass($(id+'_actions'), 'hidden');
}

function panel_edit(id) {
  toggleClass($(id+'_edit'), 'hidden');
  toggleClass($(id+'_view'), 'hidden');
}

function panel_refresh(id) {
  var surl = getXWikiURL("ChronoServices", "ProjectDisplay", "view", "xpage=plain&amp;puid=" + currentSpace + "&amp;type=" + id);
  var myAjax = new Ajax.Updater(
    id, 
    surl, 
    {
      method: 'get'
    });
}

function panel_save(type) {
  if (type == "projectdata") {
    projectdata_save();
  } 
  if (type == "description") {
    projectdesc_save();
  }
  if (type == "projectphases") {
    projectphases_save();
  }
  if (type == "notifications") {
    notifications_save();
  }
}

function notifications_save() {
  var id = 'notifications_view';
  $('notifications_content_edit').style.visibility="hidden";
  var surl = getXWikiURL(currentSpace, currentPage, "view", "");
  parameters = Form.serialize($('notifications_form'));

  var myAjax = new Ajax.Request (
    surl, 
    {
      method: 'post',
      postBody: parameters,
      onComplete: function() { 
        panel_refresh(id);
        toggleClass($('notifications_edit'), 'hidden');
        toggleClass($('notifications_view'), 'hidden');
        $('notifications_content_edit').style.visibility="visible";
      }
    });
}

function projectdesc_save() {
  var id = 'description_view';
  $('description_content_edit').style.visibility="hidden";
  var desc = $('ChronoClasses.ProjectClass_0_desc');
  var surl = getXWikiURL(currentSpace, "WebHome", "save", "");
  var parameters = desc.id + '=' + desc.value;
  parameters = parameters + '&amp;comment=editdescription';

  var myAjax = new Ajax.Request (
    surl, 
    {
      method: 'post',
      postBody: parameters,
      onComplete: function() { 
        panel_refresh(id);
        toggleClass($('description_edit'), 'hidden');
        toggleClass($('description_view'), 'hidden');
        $('description_content_edit').style.visibility="visible";
      }
    });
}

function projectdata_save() {
  var reload = false;
  var id = 'projectdata_view';
  $('projectdata_content_edit').style.visibility="hidden";
  var name = $('ChronoClasses.ProjectClass_0_name');
  var container = $('ChronoClasses.ProjectClass_0_container');
  if (container.value != currentContainer) {
    reload = true;
  }
  var codename = $('ChronoClasses.ProjectClass_0_codename');
  var status = $('ChronoClasses.ProjectClass_0_status');
  var start = $('ChronoClasses.ProjectClass_0_start');
  var end = $('ChronoClasses.ProjectClass_0_end');
  var surl = getXWikiURL(currentSpace, "WebHome", "save", "");
  var parameters = name.id + '=' + name.value;
  parameters = parameters + '&amp;' + container.id + '=' + container.value;
  parameters = parameters + '&amp;' + codename.id + '=' + codename.value;
  parameters = parameters + '&amp;' + status.id + '=' + status.value;
  parameters = parameters + '&amp;' + start.id + '=' + start.value;
  parameters = parameters + '&amp;' + end.id + '=' + end.value;
  parameters = parameters + '&amp;comment=editprojectinfos';
  
  var myAjax = new Ajax.Request (
    surl, 
    {
      method: 'post',
      postBody: parameters,
      onComplete: function() {
        if (reload) {
          window.location.reload(false);
        } else {
          panel_refresh(id);
          toggleClass($('projectdata_edit'), 'hidden');
          toggleClass($('projectdata_view'), 'hidden');
          $('projectdata_content_edit').style.visibility="visible";
        }
      }
    });
}


function projectphases_save() {
  var id = 'projectphases_view';
  $('projectphases_content_edit').style.visibility="hidden";
  var surl = getXWikiURL(currentSpace, "ProjectPhases", "save", "");
  parameters = Form.serialize($('projectphases_form'));
  parameters = parameters + '&amp;comment=editphases';
  
  var myAjax = new Ajax.Request (
    surl, 
    {
      method: 'post',
      postBody: parameters,
      onComplete: function() { 
        panel_refresh(id);
        toggleClass($('projectphases_edit'), 'hidden');
        toggleClass($('projectphases_view'), 'hidden');
        $('projectphases_content_edit').style.visibility="visible";
      }
    });
}

function registerPhase(id) {
  phasesList.push(id);
}

function phaseTypeOnChange(phasenb) {
  var type = $('ChronoClasses.ProjectPhaseClass_' + phasenb + '_type').value;
  if (type == "1") {
    addClass($('phaseedition_' + phasenb + '_start'), 'hidden');
    addClass($('phaseedition_' + phasenb + '_end'), 'hidden');
    addClass($('phaseedition_' + phasenb + '_endd'), 'hidden');
    rmClass($('phaseedition_' + phasenb + '_mile'), 'hidden');
  } else {
    rmClass($('phaseedition_' + phasenb + '_start'), 'hidden');
    rmClass($('phaseedition_' + phasenb + '_end'), 'hidden');
    rmClass($('phaseedition_' + phasenb + '_endd'), 'hidden');
    addClass($('phaseedition_' + phasenb + '_mile'), 'hidden');
  }
  calInitDates();
}

function switchPhase(phaseid) {
  var inputid = 'ChronoClasses.ProjectPhaseClass_' + phaseid + '_iscurrentphase';
  var lightid = phaseid + '_iscurrent';
  var textid = phaseid + '_iscurrent_text';
  var nottextid = phaseid + '_notcurrent_text';
  if ($(inputid).value == "0") {
    /* switch all phases to notcurrent */
    for (var i = 0; i &lt; phasesList.length; i++) {
      var tid = 'ChronoClasses.ProjectPhaseClass_' + phasesList[i] + '_iscurrentphase';
      var lighttid = phasesList[i] + '_iscurrent';
      var texttid = phasesList[i] + '_iscurrent_text';
      var nottexttid = phasesList[i] + '_notcurrent_text';
      if ($(tid).value != "0") {
        $(tid).value = "0";
        /* switch off the corresponding lighbulbs */
        addClass($(lighttid), 'invisible');
        addClass($(texttid), 'hidden');
        rmClass($(nottexttid), 'hidden');
      }
    }
    /* swith the calling phase to active */
    $(inputid).value = "1";
    rmClass($(lightid), 'invisible');
    rmClass($(textid), 'hidden');
    addClass($(nottextid), 'hidden');
  } else {
    /* switch the calling phase to inactive */
    $(inputid).value = "0";
    addClass($(lightid), 'invisible');
  }
}

function addphase(elderbrother, after) {
  var surl = getXWikiURL("ChronoServices", "ProjectDisplay", "view", "");
  parameters = "xpage=plain&amp;type=projectphases_add&amp;";
  parameters += "puid=" + currentSpace + "&amp;";
  
  var i;
  var date1 = new Date();
  var date2 = new Date();
  if (regDatesList.length &gt; 0) {
    date1.setTime(regDatesList[regDatesList.length - 1][1].getTime());
  }
  date2.setTime(date1.getTime() + (30 * secsPerDay));
  /* push index (i) to the previous phase's start */
  for (i = 0; i &lt; regDatesList.length; i++) {
    if (regDatesList[i][0].split('_')[1] == elderbrother.split('_')[1]) {
      /* get end date of previous phase */
      date1 = regDatesList[i + 1][1];
      if (regDatesList[i + 2][1]) {
        /* get start date of next phase if any */
        date2 = regDatesList[i + 2][1];
      }
      break;
    }
  }
  
  // useless since XWIKI-1545
  // var pdate1 = new Date(date1.getTime() + (secsPerDay + secsPerDay / 2));
  // var pdate2 = new Date(date2.getTime() - (secsPerDay + secsPerDay / 2));
  var pdate1 = new Date(date1.getFullYear(), date1.getMonth(), date1.getDay() + 1);
  var pdate2 = new Date(date2.getFullYear(), date2.getMonth(), date2.getDay() - 1);
  parameters += "start=" + pdate1.getTime() + "&amp;";
  parameters += "end=" + pdate2.getTime();

  var myAjax = new Ajax.Request (
    surl, 
    {
      method: 'post',
      postBody: parameters,
      onComplete: function(transport) {
        panel_refresh('projectphases_view');
        /* add edition TR */
        if (after)
          new Insertion.After(elderbrother, transport.responseText);
        else
          new Insertion.Before(elderbrother, transport.responseText);
        /* reinit calendars */
        calInitDates();
        /* update XObject number */
        $('ChronoClasses.ProjectPhaseClass_nb').value = regDatesList.length / 2;
      }
    });
}

function deletephase(phasenb) {
  var ret = confirm(confirmdelphase);
  if (!ret) {
    return;
  }
  var id = 'projectphases_view';
  var surl = getXWikiURL(currentSpace, "ProjectPhases", "objectremove", "");
  parameters = "classname=ChronoClasses.ProjectPhaseClass&amp;classid=" + phasenb;
  parameters = parameters + '&amp;comment=deletephase';
  var myAjax = new Ajax.Request (
    surl, 
    {
      method: 'post',
      postBody: parameters,
      onComplete: function() {
        /* remove phase from phaseList */
        removeItemFromArray(phasesList, phasenb)
        /* update phases view */
        panel_refresh(id);
        /* remove phase edition from DOM */
        $('phaseedition_' + phasenb).parentNode.removeChild($('phaseedition_' + phasenb));
        /* refresh phases dates list */
        calInitDates();
        /* update XObject number */
        $('ChronoClasses.ProjectPhaseClass_nb').value = regDatesList.length / 2;
        $('phaseedition_' + phasenb + '_add').parentNode.removeChild($('phaseedition_' + phasenb + '_add'));
      }
    });
}

function change_article_type() {
  var type = $('article_type_choice').value;
  var elementList = document.getElementsByClassName('article');
  var elements = $A(elementList);
  if (type == '') {
    elements.each( function(element){
      if (eltHasClass(element, 'hidden')) {
        rmClass(element, 'hidden');
      }
    });
  } else {
    elements.each( function(element){
      if (!eltHasClass(element, 'hidden')) {
        addClass(element, 'hidden');
      }
    });
    elementList = document.getElementsByClassName(type);
    elements = $A(elementList);
    elements.each( function(element){
      if (eltHasClass(element, 'hidden')) {
        rmClass(element, 'hidden');
      }
    });
  }
}

// ------------------ //
// Projects dashboard //
// ------------------ //

function refresh_container_stateicon(id) {
  if (eltHasClass($(id), "hidden")) {
    var img = $(id.split('_')[0] + '_openCloseImg');
    if (img)
      if (!eltHasClass($(id.split('_')[0] + '_content'), "activity"))
        img.src = '$xwiki.getSkinFile("open.gif")';
      else
        img.src = '$xwiki.getSkinFile("plus.gif")';
  } else {
    var img = $(id.split('_')[0] + '_openCloseImg');
    if (img)
      if (!eltHasClass($(id.split('_')[0] + '_content'), "activity"))
        img.src = '$xwiki.getSkinFile("close.gif")';
      else
        img.src = '$xwiki.getSkinFile("minus.gif")';
  }
}

function childs_visibility(id, type) {
  toggleClass($(id), 'hidden');
  refresh_container_stateicon(id);
}

function container_mouseout(id) {
  addClass($(id + '_actions'), 'hidden');
}

function container_mouseover(id) {
  rmClass($(id + '_actions'), 'hidden');
}

function setLoadingBg(id, state) {
  if (state == true) {
    $(id).style.background = "url(/xwiki/skins/chronopolys/ajax-loader-bar.gif")) center no-repeat"
    $(id).innerHTML = "";
  } else {
    $(id).style.background = "";
  }
}

function container_create(type, parent, transport) {
  var div = document.createElement("div");
  div.id = transport.responseText;
  div.className = type + "_container";
  if (type == "axis")
    $('axis_all').appendChild(div);
  else
    $(parent + '_containerchilds').appendChild(div);
  container_refresh(div.id);
}

function container_add(type, parent) {
  var surl = getXWikiURL("ChronoServices", "ContainerDisplay", "view", "xpage=plain&amp;action=add&amp;type=" + type + "&amp;parent=" + parent);
  var myAjax = new Ajax.Request (
    surl, 
    {
      method: 'get',
      onComplete: container_create.bind(this, type, parent)
    });
}

function container_save(id) {
  var name = '';
  var style = '';
  var desc = '';

  if ($(id + '_input_name')) // handle missing el
    name = $(id + '_input_name').firstChild;
  if ($(id + '_input_style')) // handle missing el
    var style = $(id + '_input_style').firstChild;
  if ($(id + '_input_desc').firstChild) // handle missing el
    desc = $(id + '_input_desc').firstChild;

  //setLoadingBg(id, true);
  var surl = getXWikiURL("ProjectContainers", id, "save", "");
  var parameters = name.id + '=' + name.value + '&amp;' + style.name + '=' + style.value +'&amp;' + desc.id + '=' + desc.value;
  var myAjax = new Ajax.Request (
    surl, 
    {
      method: 'post',
      postBody: parameters,
      onComplete: function() { container_refresh(id)
      }
    });
}

function container_refresh(id) {
  //resize_container(id, id);  
  reloadDashboard("");
  /* $(id).style.height = '28px';
  setLoadingBg(id, true);
  var surl = getXWikiURL("ChronoServices", "ContainerDisplay", "view", "xpage=plain&amp;pcuid=" + id + "&amp;seed=" + Math.floor(Math.random()*10000));
  var myAjax = new Ajax.Updater(
    id, 
    surl, 
    {
      method: 'post',
      onSuccess: function() { 
        setLoadingBg(id, false);
        $(id).style.height = '';
      }
    });
  */
}

function container_move(id, way) {
  setLoadingBg(id, true);
  var surl = getXWikiURL("ChronoServices", "ContainerDisplay", "view", "xpage=plain&amp;action="+way+"&amp;pcuid=" + id);
  var myAjax = new Ajax.Request (
    surl, 
    {
      method: 'get',
      onComplete: function(transport) {
        var uids = transport.responseText.split(' ');
        var id1 = uids[0]
        var id2 = uids[1]
        $(id1).id = id2;
        $(id2).id = id1;
        container_refresh(id1);
        container_refresh(id2);
      }
    });
}

function container_deleteaction(id) {
  var surl = getXWikiURL("ChronoServices", "ContainerDisplay", "view", "pcuid=" + id + "&amp;action=delete");
  var myAjax = new Ajax.Request (
    surl, 
    {
      method: 'get',
      onComplete: function() { 
        reloadDashboard('');
      }
    });  
}

function container_infos(id) {
  toggleClass($(id + '_infos'), "hidden");
}

function container_delete(id) {
  if (confirm(confirmcontainerdelete)) {
    container_deleteaction(id);
  }
}

function container_edit(id) {
  toggleClass($(id + '_edit'), "hidden");
}

function blindup(id) {
  Effect.BlindUp(id, { queue: 'end' } )
}

var hiddenContainers;

function getContainersStates() {
  var els = document.getElementsByClassName('hiddenable', $('axis_all'));
  var elist = new Array();
  str = '[';
  for (var i = 0; i &lt; els.length; i++) {
    if (eltHasClass(els[i], 'hidden')) {
      if (elist.length &gt; 0) {
        str += ',';
      }
      elist.push(els[i].id);
      str += '"' + els[i].id + '"';
    }
  }
  str += ']';
  return str;
}

function updateContainersStates() {
  var newhc = getContainersStates();
  if (newhc != hiddenContainers) {
    hiddenContainers = newhc;
    var surl = getXWikiURL(userSpace, userPage, "save", "");
    var parameters = 'XWiki.XWikiUsers_0_prefered_containers_state=' + hiddenContainers;
    var myAjax = new Ajax.Request (
      surl, 
      {
        method: 'post',
        postBody: parameters
      });
  }
  setTimeout("updateContainersStates()", 5000);
}

// $context.getLocalUser()

function initContainersStates(hiddenContainers) {    
  if (hiddenContainers != '') {
    var hiddenContainersTab = eval(hiddenContainers);
  } else {
    hiddenContainersTab = new Array();
  }
  for (var i = 0; i &lt; hiddenContainersTab.length; i++) {
    if ($(hiddenContainersTab[i])) {
      addClass($(hiddenContainersTab[i]), 'hidden');
      refresh_container_stateicon(hiddenContainersTab[i]);
    }
  }
  setTimeout("updateContainersStates()", 5000);
}
function processInfoBubble(id, uid) {
  var myDiv = $(id);
  var coords = getAbsolutePos(myDiv);
  coords.x = coords.x + 8;
  coords.y = coords.y + 2;
  var bubble = Timeline.Graphics.createBubbleForPoint(window.document, coords.x, coords.y, 300, 100);
  bubble.content.innerHTML = $(uid + '_info').innerHTML;
}
&lt;/script&gt;
{/pre}</content>
</xwikidoc>
