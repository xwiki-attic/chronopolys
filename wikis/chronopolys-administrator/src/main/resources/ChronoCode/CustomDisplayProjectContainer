<?xml version="1.0" encoding="ISO-8859-1"?>

<xwikidoc>
<web>ChronoCode</web>
<name>CustomDisplayProjectContainer</name>
<language></language>
<defaultLanguage>en</defaultLanguage>
<translation>0</translation>
<parent></parent>
<creator>XWiki.jvdrean</creator>
<author>XWiki.Admin</author>
<customClass></customClass>
<contentAuthor>XWiki.Admin</contentAuthor>
<creationDate>1175615037000</creationDate>
<date>1189684331000</date>
<contentUpdateDate>1189684331000</contentUpdateDate>
<version>1.97</version>
<title></title>
<template></template>
<defaultTemplate></defaultTemplate>
<validationScript></validationScript>
<comment></comment>
<minorEdit>false</minorEdit>
<object>
<class>
<name>XWiki.TagClass</name>
<customClass></customClass>
<customMapping></customMapping>
<defaultViewSheet></defaultViewSheet>
<defaultEditSheet></defaultEditSheet>
<defaultWeb></defaultWeb>
<nameField></nameField>
<validationScript></validationScript>
<tags>
<cache>0</cache>
<displayType>input</displayType>
<multiSelect>1</multiSelect>
<name>tags</name>
<number>1</number>
<prettyName>Tags</prettyName>
<relationalStorage>1</relationalStorage>
<separator> </separator>
<separators> ,|</separators>
<size>30</size>
<unmodifiable>0</unmodifiable>
<values></values>
<classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
</tags>
</class>
<name>ChronoCode.CustomDisplayProjectContainer</name>
<number>0</number>
<className>XWiki.TagClass</className>
<property>
<tags/>
</property>
</object>
<content>#if($type=="view")
$value
#else
&lt;div class="select"&gt;
  &lt;span id="sel_axis_span" class="noitem" style="display:none;"&gt;&lt;/span&gt;
  &lt;a id="sel_axis_a" href="" onclick="return observeOpener(this);"&gt;$msg.get($currentAxis.display("name", "view"))&lt;/a&gt; 
  &lt;ul id="sel_axis" class="selectbox" style="width:130px"&gt;&lt;li&gt;$msg.get($currentAxis.display("name", "view"))&lt;/li&gt;&lt;/ul&gt;
  &lt;input type="hidden" id="sel_axis_i" value="$msg.get($currentAxis.display("name", "view"))" /&gt;
&lt;/div&gt;&amp;nbsp;&amp;gt;&amp;nbsp;
&lt;div class="select"&gt;
  &lt;span id="sel_yard_span" class="noitem" style="display:none;"&gt;&lt;/span&gt;
  &lt;a id="sel_yard_a" href="" onclick="return observeOpener(this);"&gt;$msg.get($currentYard.display("name", "view"))&lt;/a&gt; 
  &lt;ul id="sel_yard" class="selectbox" style="width:130px"&gt;&lt;li&gt;$msg.get($currentYard.display("name", "view"))&lt;/li&gt;&lt;/ul&gt;
  &lt;input type="hidden" id="sel_yard_i" value="$msg.get($currentYard.display("name", "view"))" /&gt;
&lt;/div&gt;&amp;nbsp;&amp;gt;&amp;nbsp;
&lt;div class="select"&gt;
  &lt;span id="sel_act_span" class="noitem" style="display:none;"&gt;&lt;/span&gt;
  &lt;a id="sel_act_a" href="" onclick="return observeOpener(this);"&gt;$msg.get($currentActivity.display("name", "view"))&lt;/a&gt; 
  &lt;ul id="sel_act" class="selectbox" style="width:130px"&gt;&lt;li&gt;$msg.get($currentActivity.display("name", "view"))&lt;/li&gt;&lt;/ul&gt;
  &lt;input type="hidden" id="sel_act_i" value="$msg.get($currentActivity.display("name", "view"))" /&gt;
&lt;/div&gt;&amp;nbsp;
&lt;span id="sel_save" style="cursor:pointer;display:none;" onclick="saveChanges();"&gt;($msg.get("save").toLowerCase())&lt;/span&gt;
&lt;span id="sel_back" style="cursor:pointer;" onclick="toggleClass($('container_breadcrumb'), 'hidden'); toggleClass($('sel_container_breadcrumb'), 'hidden');"&gt;($msg.get("back").toLowerCase())&lt;/span&gt;
&lt;input type="hidden" name="$prefix$name" id="$prefix$name" value="$value"&gt;
#set($contname="ProjectContainers.${value}")
&lt;input type="hidden" size="30" name="$prefix${name}_visible" id="$prefix${name}_visible" value="$xwiki.getDocument($contname).display("name", "view")" disabled="disabled" class="#if($value=="OrphanActivity")hidden#end" /&gt;
{pre}
&lt;script type="text/javascript"&gt;&lt;!--//--&gt;&lt;![CDATA[//&gt;&lt;!--
var curr_axis = "$msg.get($currentAxis.display("name", "view"))";
var curr_yard = "$msg.get($currentYard.display("name", "view"))";
var curr_act = "$msg.get($currentActivity.display("name", "view"))";
var root = { 
#foreach($axis in $xwiki.chronopolys.getProjectContainers("axis"))
 #if($velocityCount &gt; 1),#end
  #set ($tmp = $axis.name)  #set ($count = $tmp.indexOf(".") + 1)  #set($axispage = $tmp.substring($count))
  "$axis.name": { "name": "$xwiki.getXMLEncoded($msg.get($axis.get("name")))", "obj": "$axispage", "childs" : { 
	#set ($ylist = "") 	#set ($ylist = $xwiki.chronopolys.getProjectContainerChilds($axispage))
	#if ($ylist.size() &gt; 0)
	  #foreach($yard in $xwiki.chronopolys.getProjectContainerChilds($axispage))  
	    #if($velocityCount &gt; 1),#end
	    #set ($tmp = $yard.name)  #set ($count = $tmp.indexOf(".") + 1)  #set ($apage = $tmp.substring($count))
	    "$yard.name" : { "name": "$xwiki.getXMLEncoded($msg.get($yard.get("name")))", "obj": "$apage", "childs": {
	    #set ($alist = "") #set ($alist = $xwiki.chronopolys.getProjectContainerChilds($apage))
	    #if ($alist.size() &gt; 0)
        #foreach($activity in $alist)
	       #if($velocityCount &gt; 1),#end
	       #set ($tmp = $activity.name) #set ($count = $tmp.indexOf(".") + 1) #set ($apage = $tmp.substring($count))
	       "$activity.name": { "name": "$xwiki.getXMLEncoded($msg.get($activity.get("name")))", "obj": "$apage" }
	      #end
	    #end
	    }}
	  #end        
	#end
  }}
#end
};
var axis = "";
//init axis
for(i in root) {
   if(root[i].name)  axis += '&lt;li value="' + i + '"&gt;' + root[i].name + '&lt;/li&gt;';
}
$('sel_axis').innerHTML = "";
new Insertion.Bottom('sel_axis', axis);
observeDropDownOptions($('sel_axis'));

//initialize dropdowns
var hideDropDowns = function() {
  var dropdowns = document.getElementsByClassName('select');
  for (var i = 0; i &lt; dropdowns.length; i++) {
    dropdown = dropdowns[i];
    Element.addClassName(dropdown, 'hide-dropdown');
  }
} 
Event.observe(window, 'load', hideDropDowns, false);

//observe dropdown opener
function observeOpener(opener) {
  var dropdown = opener.parentNode;
  if (Element.hasClassName(dropdown, 'hide-dropdown')) {
    Element.removeClassName(dropdown, 'hide-dropdown');    
  } 
  else {
    Element.addClassName(dropdown, 'hide-dropdown');
  }
 return false;
}

//observing dropdown option
function observeOption(event) {
  var option = Event.element(event);
  var value = option.childNodes[0].nodeValue;
  var itemid = option.getAttribute('value');
  var selectbox = Event.findElement(event, 'ul');
  setDDValue(selectbox.parentNode, itemid, value);
  Element.addClassName(selectbox.parentNode, 'hide-dropdown');    
  Event.stop(event);
}

//observing dropdown options
function observeDropDownOptions(select) {
  var options = select.getElementsByTagName('li');
  for (var j = 0; j &lt; options.length; j++) {
   var option = options[j];
   Event.observe(option, 'click', observeOption, false);
  }
}

function togglePairVisib(first, second, opt)
{
  if(opt == true)
  {
    first.style.display = "";
    second.style.display = "none";
  }
  else
  {
    first.style.display = "none";
    second.style.display = "";
  }
}

//setting dropdown value into hidden field
function setDDValue(dropdown, itemid, value) {
  var a = dropdown.getElementsByTagName('a')[0];
  var input = dropdown.getElementsByTagName('input')[0];
  Element.update(a, value);
  //update the input for the current breadcrumb
  if (input) {
    input.value = itemid;
  }
  //selecting an axis will load yard and activity options for it
  if(a.id.indexOf('axis') &gt; 0)  {
   var yards = "";
   var c = root[itemid].childs; // yards
   var f = 0;
   var fc = ""; // first selected yard
   for(i in c) {
     if(c[i].name) {
      if(f == 0) { fc = i; f++; }
      yards += '&lt;li value="' + i + '"&gt;' + c[i].name + '&lt;/li&gt;';
     }
   }
   $('sel_yard').innerHTML = "";
   $('sel_yard_i').value = fc;
   if(yards) {
     togglePairVisib($('sel_yard_a'), $('sel_yard_span'), true);
     $('sel_yard_a').innerHTML = c[fc].name;
     $('sel_yard_span').innerHTML = "";
     new Insertion.Bottom('sel_yard', yards);
     observeDropDownOptions($('sel_yard'));
   }
   else {
     togglePairVisib($('sel_yard_a'), $('sel_yard_span'), false);
     $('sel_yard_span').innerHTML = '$msg.get("noyards")';
   }
   //init activity select according to the first selected yard
   var ys = $('sel_yard_i').value;
   if(ys) {
    var c = root[itemid].childs[ys].childs; //activities
    var acts = "";
    f = 0;
    for(i in c) {
      if(c[i].name) {
        if(f == 0) { fc = i; f++; }
        acts += '&lt;li value="' + i + '"&gt;' + c[i].name + '&lt;/li&gt;';
      }
    }
    $('sel_act').innerHTML = "";
    $('sel_act_i').value = fc;
    if(acts) {
      togglePairVisib($('sel_act_a'), $('sel_act_span'), true);
      $('sel_act_a').innerHTML = c[fc].name;
      $('sel_act_span').innerHTML = "";
      new Insertion.Bottom('sel_act', acts);
      observeDropDownOptions($('sel_act'));
      //if selected breadcrumbs != current breadcrumbs display save link
      if(curr_axis != $('sel_axis_a').innerHTML || curr_yard != $('sel_yard_a').innerHTML || curr_act != $('sel_act_a').innerHTML) 
        togglePairVisib($('sel_save'), $('sel_back'), true);
      else
        togglePairVisib($('sel_save'), $('sel_back'), false);
    }
    else {
     togglePairVisib($('sel_act_a'), $('sel_act_span'), false);
     $('sel_act_span').innerHTML = '$msg.get("noactivities")';
     togglePairVisib($('sel_save'), $('sel_back'), false);
    }
   } // there no yards, so no activities
   else {
     togglePairVisib($('sel_act_a'), $('sel_act_span'), false);
     $('sel_act_span').innerHTML = '$msg.get("noactivities")';
     togglePairVisib($('sel_save'), $('sel_back'), false);
   }
  }
  //selecting a yard will load activities options for it
  else if(a.id.indexOf('yard') &gt; 0)
  {
      var acts = "";
      var c = root[$('sel_axis_i').value].childs[itemid].childs;
      var f = 0;
      var fc;
      for(i in c) {
        if(c[i].name) {
          if(f == 0) { fc = i; f++; }
          acts += '&lt;li value="' + i + '"&gt;' + c[i].name + '&lt;/li&gt;';
        }
      }
     $('sel_act').innerHTML = "";
     $('sel_act_i').value = fc;
     if(acts) {
        togglePairVisib($('sel_act_a'), $('sel_act_span'), true);
        $('sel_act_a').innerHTML = c[fc].name;
        $('sel_act_span').innerHTML = "";
        new Insertion.Bottom('sel_act', acts);
        observeDropDownOptions($('sel_act'));
        if(curr_axis != $('sel_axis_a').innerHTML || curr_yard != $('sel_yard_a').innerHTML || curr_act != $('sel_act_a').innerHTML)
          togglePairVisib($('sel_save'), $('sel_back'), true);
        else
          togglePairVisib($('sel_save'), $('sel_back'), false);
     }
     else {
       togglePairVisib($('sel_act_a'), $('sel_act_span'), false);
       $('sel_act_span').innerHTML = '$msg.get("noactivities")';
       togglePairVisib($('sel_save'), $('sel_back'), false);
     }
  }
}

//closing dropdown by ESC
function onKeyPress(event) {
  switch(event.keyCode) {
    case Event.KEY_ESC: hideDropDowns(event);
    Event.stop(event);
    return;
  }
}
Event.observe(document, "keypress", onKeyPress, true);

//closing dropdown by click out of it
function hideDropDownsOnClick(event) {
  var a = Event.element(event);
  if (a.tagName == 'a') { return false; }
  var dropdowns = document.getElementsByClassName('select');
  for (var i = 0; i &lt; dropdowns.length; i++) {
    dropdown = dropdowns[i];
     Element.addClassName(dropdown, 'hide-dropdown');
  }
}
Event.observe(document, "mouseup", hideDropDownsOnClick, true);

function saveChanges()
{
   var name = $('sel_act_a').innerHTML;
   var ax = $('sel_axis_i').value;
   var y = $('sel_yard_i').value;
   var ac = $('sel_act_i').value;
   var page = root[ax].childs[y].childs[ac].obj;
   var t = true;
   if(page == "OrphanActivity")
    t = false;
   projectcontainerChange(name, page, t);    
}

function projectcontainerChange(name, page, displayConfirm) {
  if (displayConfirm) {
    if(confirm("$msg.get("confirmprojectcontainerchange")")) {
      $('ChronoClasses.ProjectClass_0_container').value = page;
      var vis = $('ChronoClasses.ProjectClass_0_container_visible');
      vis.value = name;
      projectdata_save();
    }
  }
  else {
     $('ChronoClasses.ProjectClass_0_container').value = page;
     var vis = $('ChronoClasses.ProjectClass_0_container_visible');
     vis.value = name;
     projectdata_save();
  } 
}
//--&gt;&lt;!]]&gt;&lt;/script&gt;
{/pre}
#end</content>
</xwikidoc>
